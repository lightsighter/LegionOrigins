/* as-simple-as-possible example to stress soundness proof */

type pp<r1> = rr[r2] < int@r1, < int@r2, int@r2 > > where r2 <= r1

task nocolor[r]( dummy : int, ptr : int@r ) : int = 0

task check1[r]( x : int ) : bool, rdwrs(r) =
    partition r using nocolor[r](0) as rc1, rc2 in
    let p1 : int@r = new int@r in
    let p2 : int@rc1 = new int@rc1 in
    let p3 : int@rc1 = new int@rc1 in
    let v1 : pp<r> = pack < p1, < p2, p3 > > as pp<r>[rc1] in
    unpack v1 as v2 : pp<r>[rd1] in
    write(upregion(v2.2.1, r), 0)

task check2[r]( x : int ) : bool, rdwrs(r) =
    partition r using nocolor[r](0) as rc1, rc2 in
    let p1 : int@r = new int@r in
    let p2 : int@rc1 = new int@rc1 in
    let p3 : int@rc1 = new int@rc1 in
    let v1 : pp<r> = pack < p1, < p2, p3 > > as pp<r>[rc1] in
    unpack v1 as v2 : pp<r>[rd1] in
    let v3 : pp<r> = pack < v2.1, < v2.2.2, v2.2.1 > > as pp<r>[rd1] in
    false

/* this one shouldn't work, and doesn't type check */
task check3[r]( x : int ) : bool, rdwrs(r) =
    partition r using nocolor[r](0) as rc1, rc2 in
    let p1 : int@r = new int@r in
    let p2 : int@rc1 = new int@rc1 in
    let p3 : int@rc1 = new int@rc1 in
    let v1 : pp<r> = pack < p1, < p2, p3 > > as pp<r>[rc1] in
    unpack v1 as v2 : pp<r>[rd1] in
    let v3 : pp<r> = pack < v2.1, < v2.1, v2.2.1 > > as pp<r>[rd1] in
    false

/* this one is safe because the dynamic check performed by the downregion()
  will null out the pointer if it's not in the subregion */
task check4[r]( x : int ) : bool, rdwrs(r) =
    partition r using nocolor[r](0) as rc1, rc2 in
    let p1 : int@r = new int@r in
    let p2 : int@rc1 = new int@rc1 in
    let p3 : int@rc1 = new int@rc1 in
    let v1 : pp<r> = pack < p1, < p2, p3 > > as pp<r>[rc1] in
    unpack v1 as v2 : pp<r>[rd1] in
    let v3 : pp<r> = pack < v2.1, < downregion(v2.1, rd1), v2.2.1 > > as pp<r>[rd1] in
    false
