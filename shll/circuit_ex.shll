type CircuitNode        = < int/*voltage*/, 
                            < int/*current*/,
                            < int/*charge*/, int/*capacitance*/ > > >
type CircuitWire<rn,rg>  = < CircuitNode@rn,
                             <CircuitNode@(rn,rg),
                             <int/*resistance*/, int/*current*/> > >

type node_list<rl,rn>       = < CircuitNode@rn, node_list<rl,rn>@rl >
type wire_list<rl,rw,rn,rg>= < CircuitWire<rn,rg>@rw, wire_list<rl,rw,rn,rg>@rl >

type CircuitPiece<rl,rw,rn> = rr[rpw,rpn,rg]
        < wire_list<rl,rpw,rpn,rg>@rl,
          node_list<rl,rpn>@rl >         
          where rpn <= rn and rg <= rn and rpw <= rw and
                rpn * rg and rn * rw and rl * rn and rl * rw

task color_circuit[rn,rw,rl] ( all_nodes : node_list<rl,rn>@rl,
                               all_wires : wire_list<rl,rw,rn>@rl ), reads(rn,rw,rl) : 
                               <coloring(rn), <coloring(rn), coloring(rw)> > =  
    <newcolor rn, <newcolor rn, newcolor rw> >

task build_lists[rl,rw,rn,rpw,rpn,rg] ( all_nodes : node_list<rl,rn>@rl, all_wires : wire_list<rl,rw,rn>@rl,
                                 owned_coloring : coloring(rn), ghost_coloring : coloring(rn),
                                 wires_coloring : coloring(rw), c : int), reads(rn,rw,rl), writes(rl) :
                                 < wire_list<rl,rpw,rpn,rg>@rl, node_list<rl,rpn>@rl > = 
  let wire_ptr : wire_list<rl,rpw,rpn,rg>@rl = new wire_list<rl,rpw,rpn,rg>@rl in 
  let node_ptr : node_list<rl,rpn>@rl = new node_list<rl,rpn>@rl in
    <wire_ptr,node_ptr>

task calc_new_currents[rl,rw,rn,rg] ( ptr_list : wire_list<rl,rw,rn,rg>@rl ), reads(rl,rw,rn,rg), writes(rw) : bool =
  if isnull(ptr_list) then true else
  let wire_node : wire_list<rl,rw,rn,rg> = read(ptr_list) in
  let wire : CircuitWire<rn,rg> = read(wire_node.1) in
  let in_node : CircuitNode = read(wire.1) in
  let out_node : CircuitNode = read(wire.2.1) in
  let current : int = in_node.1 + out_node.1 + wire.2.2.1 in 
  let new_wire : CircuitWire<rn,rg> = <wire.1,<wire.2.1,<wire.2.2.1,current> > > in
  let _ : CircuitWire<rn,rg>@rw = write(wire_node.1, new_wire) in
      calc_new_currents[rl,rw,rn,rg](wire_node.2)

task distribute_charge[rl,rw,rn,rg] ( ptr_list : wire_list<rl,rw,rn,rg>@rl ), reads(rl,rw,rn), reduces(reduce_charge,rn,rg), atomic(rn,rg) : bool =
  if isnull(ptr_list) then true else
  let wire_node : wire_list<rl,rw,rn,rg> = read(ptr_list) in
  let wire : CircuitWire<rn,rg> = read(wire_node.1) in
  let _ : CircuitNode@rn = reduce(reduce_charge, wire.1, wire.2.2.2) in
  let _ : CircuitNode@(rn,rg) = reduce(reduce_charge, wire.2.1, wire.2.2.2) in
      distribute_charge[rl,rw,rn,rg](wire_node.2)

task update_voltage[rl,rn] ( ptr_list : node_list<rl,rn>@rl ), reads(rl,rn), writes(rn) : bool = 
  if isnull(ptr_list) then true else
  let node_node : node_list<rl,rn> = read(ptr_list) in
  let node : CircuitNode = read(node_node.1) in
  let voltage : int = node.2.2.1 + node.2.2.2 in
  let new_node : CircuitNode = < voltage, <node.2.1, <node.2.2.1,node.2.2.2> > > in
  let _ : CircuitNode@rn = write(node_node.1, new_node) in
      update_voltage[rl,rn](node_node.2)

task reduce_charge ( node : CircuitNode, current : int ) : CircuitNode =
    let new_charge : int = node.2.2.1 + current in
        < node.1, <new_charge, <node.2.2.1,node.2.2.2> > > 

task simulate_circuit[rl,rw,rn] ( all_nodes : node_list<rl,rn>@rl,
                                  all_wires : wire_list<rl,rw,rn,rn>@rl, steps : int ),
                          reads(rn,rw,rl), writes(rn,rw,rl) : bool = 
  let pc : <coloring(rn),<coloring(rn),coloring(rw)> >
                      = color_circuit[rn,rw,rl](all_nodes,all_wires) in
  partition rn using pc.1 as rn0,rn1 in
  partition rn using pc.2.1 as rg0,rg1 in
  partition rw using pc.2.2 as rw0,rw1 in
  let lists0 : <wire_list<rl,rw0,rn0,rg0>@rl,node_list<rl,rn0>@rl> = 
        build_lists[rl,rw,rn,rw0,rn0,rg0](all_nodes,all_wires,pc.1,pc.2.1,pc.2.2,0) in
  let piece0 : CircuitPiece<rl,rw,rn> = pack lists0 as CircuitPiece<rl,rw,rn>[rw0,rn0,rg0] in
  let lists1 : <wire_list<rl,rw1,rn1,rg1>@rl,node_list<rl,rn1>@rl> =
        build_lists[rl,rw,rn,rw1,rn1,rg1](all_nodes,all_wires,pc.1,pc.2.1,pc.2.2,1) in
  let piece1 : CircuitPiece<rl,rw,rn> = pack lists1 as CircuitPiece<rl,rw,rn>[rw1,rn1,rg1] in
      execute_time_steps[rl,rw,rn](piece0,piece1,steps)

task execute_time_steps[rl,rw,rn] ( p0 : CircuitPiece<rl,rw,rn>, p1 : CircuitPiece<rl,rw,rn>,
                                        steps : int ) , reads(rn,rw,rl), writes(rn,rw) : bool = 
  if steps < 1 then true else
  unpack p0 as piece0 : CircuitPiece<rl,rw,rn>[rw0,rn0,rg0] in 
  unpack p1 as piece1 : CircuitPiece<rl,rw,rn>[rw1,rn1,rg1] in
  let _ : bool = calc_new_currents[rl,rw0,rn0,rg0](piece0.1) in
  let _ : bool = calc_new_currents[rl,rw1,rn1,rg1](piece1.1) in
  let _ : bool = distribute_charge[rl,rw0,rn0,rg0](piece0.1) in
  let _ : bool = distribute_charge[rl,rw1,rn1,rg1](piece1.1) in
  let _ : bool = update_voltage[rl,rn0](piece0.2) in
  let _ : bool = update_voltage[rl,rn1](piece1.2) in
      execute_time_steps[rl,rw,rn](p0,p1,steps+1)

